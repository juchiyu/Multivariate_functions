setwd("C:/Users/juchi/My Tresors/Multivariate_functions/PLSC-related")
## Reading packages ----
library(TExPosition) # to run PLSC
library(purrr) # used in the kfold function
## Read needed functions ----
source("ProjectSupplementaryData4PLS.R")
source("PLS.kFoldCV.R")
## Read example data ----
data(beer.tasting.notes)
data1<-beer.tasting.notes$data[,1:8]
data2<-beer.tasting.notes$data[,9:16]
## Run PLSC ----
pls.res <- tepPLS(data1,data2, graphs = FALSE)
## Perform 10-fold validation
pls.cv <- PLS.kFoldCV(data1, data2, pls.res, k = 10)
setwd("C:/Users/juchi/My Tresors/Multivariate_functions/PLSC-related")
data_X_non0 <- read.csv("C:/Users/juchi/Downloads/data_X_non0.csv")
data_Y_non0 <- read.csv("C:/Users/juchi/Downloads/data_Y_non0.csv")
data_X_non0
rownames(data_Y_non0)
rownames(data_X_non0) <- data_X_non0
rownames(data_Y_non0) <- data_Y_non0
rownames(data_X_non0) <- data_X_non0[,1]
rownames(data_Y_non0) <- data_Y_non0[,1]
data1 <- data_X_non0[,-1]
data2 <- data_Y_non0[,-1]
## Run PLSC ----
pls.res <- tepPLS(data1,data2, graphs = FALSE)
## get index for participants
ID <- seq(nrow(data1))
n.ID <- length(ID)
ID.order <- sample(ID, size = length(ID), replace = FALSE)
fold.idx <- setNames(
cut(seq(n.ID), unique(quantile(seq(n.ID), probs = seq(0, 1, length = k+1))),
include.lowest = TRUE,
labels = paste0("Fold", seq(k))),
ID.order)
k = 10
center1 = TRUE
center2 = TRUE
scale2 = "SS1"
scale1 = "SS1"
## Read needed functions ----
source("ProjectSupplementaryData4PLS.R")
ID.order <- sample(ID, size = length(ID), replace = FALSE)
fold.idx <- setNames(
cut(seq(n.ID), unique(quantile(seq(n.ID), probs = seq(0, 1, length = k+1))),
include.lowest = TRUE,
labels = paste0("Fold", seq(k))),
ID.order)
kfold.design <- fold.idx[order(ID.order)]
## Extracts folds
fold.lev <- levels(kfold.design)
## create empty matrices for 10 folds
pls.kfcv <- list(lx.hat = matrix(NA,
nrow = nrow(pls.res$TExPosition.Data$lx),
ncol = ncol(pls.res$TExPosition.Data$lx),
dimnames = dimnames(pls.res$TExPosition.Data$lx)),
ly.hat = matrix(NA,
nrow = nrow(pls.res$TExPosition.Data$ly),
ncol = ncol(pls.res$TExPosition.Data$ly),
dimnames = dimnames(pls.res$TExPosition.Data$ly)),
lxly.cor = list(),
p = list(),
q = list(),
ci = list(),
cj = list(),
Dv = list(),
eig = list())
i - 1
i = 1
## select target fold
tg.lev <- fold.lev[i]
## get train and test sets
train.data1 <- data1[kfold.design != tg.lev, ]
test.data1 <- data1[kfold.design == tg.lev, ]
train.data2 <- data2[kfold.design != tg.lev, ]
test.data2 <- data2[kfold.design == tg.lev, ]
## run PLS with train set
train.pls <- tepPLS(train.data1, train.data2,
center1 = center1, center2 = center2,
scale1 = scale1, scale2 = scale2, graphs = FALSE)
## project test sets
test.pls <- ProjectSupplementaryData4PLS(train.pls, test.data1, test.data2)
## save results from the train set
pls.kfcv$p[[tg.lev]] <- train.pls$TExPosition.Data$pdq$p
pls.kfcv$q[[tg.lev]] <- train.pls$TExPosition.Data$pdq$q
pls.kfcv$ci[[tg.lev]] <- train.pls$TExPosition.Data$pdq$p^2
pls.kfcv$cj[[tg.lev]] <- train.pls$TExPosition.Data$pdq$q^2
pls.kfcv$Dv[[tg.lev]] <- train.pls$TExPosition.Data$pdq$Dv
pls.kfcv$eig[[tg.lev]] <- train.pls$TExPosition.Data$pdq$eigs
## save results from the test set
pls.kfcv$lx.hat[rownames(test.data1),] <- test.pls$lx
pls.kfcv$ly.hat[rownames(test.data2),] <- test.pls$ly
## run PLS
for (i in 1:k){
## select target fold
tg.lev <- fold.lev[i]
## get train and test sets
train.data1 <- data1[kfold.design != tg.lev, ]
test.data1 <- data1[kfold.design == tg.lev, ]
train.data2 <- data2[kfold.design != tg.lev, ]
test.data2 <- data2[kfold.design == tg.lev, ]
## run PLS with train set
train.pls <- tepPLS(train.data1, train.data2,
center1 = center1, center2 = center2,
scale1 = scale1, scale2 = scale2, graphs = FALSE)
## project test sets
test.pls <- ProjectSupplementaryData4PLS(train.pls, test.data1, test.data2)
## save results from the train set
pls.kfcv$p[[tg.lev]] <- train.pls$TExPosition.Data$pdq$p
pls.kfcv$q[[tg.lev]] <- train.pls$TExPosition.Data$pdq$q
pls.kfcv$ci[[tg.lev]] <- train.pls$TExPosition.Data$pdq$p^2
pls.kfcv$cj[[tg.lev]] <- train.pls$TExPosition.Data$pdq$q^2
pls.kfcv$Dv[[tg.lev]] <- train.pls$TExPosition.Data$pdq$Dv
pls.kfcv$eig[[tg.lev]] <- train.pls$TExPosition.Data$pdq$eigs
## save results from the test set
pls.kfcv$lx.hat[rownames(test.data1),] <- test.pls$lx
pls.kfcv$ly.hat[rownames(test.data2),] <- test.pls$ly
}
pls.kfcv$lxly.cor[["cor.lxhatlyhat"]] <- diag(cor(pls.kfcv$lx.hat, pls.kfcv$ly.hat))
pls.kfcv$lxly.cor[["cor.lxlxhat"]] <- diag(cor(pls.res$TExPosition.Data$lx, pls.kfcv$lx.hat))
pls.kfcv$lxly.cor[["cor.lylyhat"]] <- diag(cor(pls.res$TExPosition.Data$ly, pls.kfcv$ly.hat))
## Run PLSC ----
pls.res <- tepPLS(data1,data2, graphs = FALSE)
## Perform 10-fold validation
pls.cv <- PLS.kFoldCV(data1, data2, pls.res, k = 10)
pls.cv$cross.validation.res$lxly.cor$cor.lxlxhat
pls.cv$cross.validation.res$lxly.cor$cor.lylyhat
plot(pls.cv$cross.validation.res$lx.hat[,1], pls.res$TExPosition.Data$lx)
plot(pls.cv$cross.validation.res$lx.hat[,1], pls.res$TExPosition.Data$lx[,1])
cor(pls.cv$cross.validation.res$lx.hat, pls.res$TExPosition.Data$lx)
pls.cv$cross.validation.res$p
pls.cv$cross.validation.res$q
lapply(pls.cv$cross.validation.res$q, function(x) x[,1:3])
dir(-1)
sum(pls.res$TExPosition.Data$pdq$q > 0)
mapply(pls.res$TExPosition.Data$pdq$q, 2, '>', 0)
apply(pls.res$TExPosition.Data$pdq$q, 2, '>', 0)
apply(pls.res$TExPosition.Data$pdq$q, 2, function(x) sum(x > 0))
cor(pls.res$TExPosition.Data$pdq$q[,1], pls.cv$cross.validation.res$q$Fold1[,1])
cor(pls.res$TExPosition.Data$pdq$q, train.pls$TExPosition.Data$pdq$q)
diag(cor(pls.res$TExPosition.Data$pdq$q, train.pls$TExPosition.Data$pdq$q))
flip <- diag(cor(pls.res$TExPosition.Data$pdq$q, train.pls$TExPosition.Data$pdq$q)) < 0
flip
diag(cor(pls.res$TExPosition.Data$pdq$p, train.pls$TExPosition.Data$pdq$p)) < 0
train.pls$TExPosition.Data$pdq$p[,flip]
train.pls$TExPosition.Data$pdq$p[,flip] <- train.pls$TExPosition.Data$pdq$p[,flip]*-1
flip <- diag(cor(pls.res$TExPosition.Data$pdq$q, train.pls$TExPosition.Data$pdq$q)) < 0
flip
## run PLS with train set
train.pls <- tepPLS(train.data1, train.data2,
center1 = center1, center2 = center2,
scale1 = scale1, scale2 = scale2, graphs = FALSE)
diag(cor(pls.res$TExPosition.Data$pdq$q, train.pls$TExPosition.Data$pdq$q)) < 0
train.pls$TExPosition.Data$pdq$p[,flip]
train.pls$TExPosition.Data$pdq$p[,flip] <- train.pls$TExPosition.Data$pdq$p[,flip]*-1
diag(cor(pls.res$TExPosition.Data$pdq$q, train.pls$TExPosition.Data$pdq$q)) < 0
flip <- diag(cor(pls.res$TExPosition.Data$pdq$q, train.pls$TExPosition.Data$pdq$q)) < 0
train.pls$TExPosition.Data$pdq$p[,flip] <- train.pls$TExPosition.Data$pdq$p[,flip]*-1
diag(cor(pls.res$TExPosition.Data$pdq$q, train.pls$TExPosition.Data$pdq$q)) < 0
## run PLS with train set
train.pls <- tepPLS(train.data1, train.data2,
center1 = center1, center2 = center2,
scale1 = scale1, scale2 = scale2, graphs = FALSE)
flip <- diag(cor(pls.res$TExPosition.Data$pdq$q, train.pls$TExPosition.Data$pdq$q)) < 0
train.pls$TExPosition.Data$pdq$q[,flip] <- train.pls$TExPosition.Data$pdq$q[,flip]*-1
diag(cor(pls.res$TExPosition.Data$pdq$q, train.pls$TExPosition.Data$pdq$q)) < 0
train.pls$TExPosition.Data$pdq$p[,flip] <- train.pls$TExPosition.Data$pdq$p[,flip]*-1
## run PLS
for (i in 1:k){
## select target fold
tg.lev <- fold.lev[i]
## get train and test sets
train.data1 <- data1[kfold.design != tg.lev, ]
test.data1 <- data1[kfold.design == tg.lev, ]
train.data2 <- data2[kfold.design != tg.lev, ]
test.data2 <- data2[kfold.design == tg.lev, ]
## run PLS with train set
train.pls <- tepPLS(train.data1, train.data2,
center1 = center1, center2 = center2,
scale1 = scale1, scale2 = scale2, graphs = FALSE)
flip <- diag(cor(pls.res$TExPosition.Data$pdq$q, train.pls$TExPosition.Data$pdq$q)) < 0
train.pls$TExPosition.Data$pdq$p[,flip] <- train.pls$TExPosition.Data$pdq$p[,flip]*-1
train.pls$TExPosition.Data$pdq$q[,flip] <- train.pls$TExPosition.Data$pdq$q[,flip]*-1
## project test sets
test.pls <- ProjectSupplementaryData4PLS(train.pls, test.data1, test.data2)
## save results from the train set
pls.kfcv$p[[tg.lev]] <- train.pls$TExPosition.Data$pdq$p
pls.kfcv$q[[tg.lev]] <- train.pls$TExPosition.Data$pdq$q
pls.kfcv$ci[[tg.lev]] <- train.pls$TExPosition.Data$pdq$p^2
pls.kfcv$cj[[tg.lev]] <- train.pls$TExPosition.Data$pdq$q^2
pls.kfcv$Dv[[tg.lev]] <- train.pls$TExPosition.Data$pdq$Dv
pls.kfcv$eig[[tg.lev]] <- train.pls$TExPosition.Data$pdq$eigs
## save results from the test set
pls.kfcv$lx.hat[rownames(test.data1),] <- test.pls$lx
pls.kfcv$ly.hat[rownames(test.data2),] <- test.pls$ly
}
pls.kfcv$lxly.cor[["cor.lxhatlyhat"]] <- diag(cor(pls.kfcv$lx.hat, pls.kfcv$ly.hat))
pls.kfcv$lxly.cor[["cor.lxlxhat"]] <- diag(cor(pls.res$TExPosition.Data$lx, pls.kfcv$lx.hat))
pls.kfcv$lxly.cor[["cor.lylyhat"]] <- diag(cor(pls.res$TExPosition.Data$ly, pls.kfcv$ly.hat))
pls.kfcv$lxly.cor$cor.lxlxhat
pls.kfcv$lxly.cor$cor.lylyhat
pls.res <- tepPLS(data1,data2, graphs = FALSE)
## Perform 10-fold validation
pls.cv <- PLS.kFoldCV(data1, data2, pls.res, k = 10)
## plot
library(PTCA4CATA)
lxplot <- createFactorMap(cbind(pls.res$TExPosition.Data$lx[,1], pls.cv$cross.validation.res$lx.hat[,1]))
lxplot$zeMap_background + lxplot$zeMap_dots
lxplot <- createFactorMap(cbind(pls.res$TExPosition.Data$ly[,1], pls.cv$cross.validation.res$ly.hat[,1]))
lxplot$zeMap_background + lxplot$zeMap_dots
plot(pls.res$TExPosition.Data$ly[,1], pls.cv$cross.validation.res$ly.hat[,1])
plot(pls.res$TExPosition.Data$ly[,2], pls.cv$cross.validation.res$ly.hat[,2])
pls.res <- tepPLS(data1,data2, graphs = FALSE)
## Perform 10-fold validation
pls.cv <- PLS.kFoldCV(data1, data2, pls.res, k = 10)
plot(pls.res$TExPosition.Data$ly[,1], pls.cv$cross.validation.res$ly.hat[,1])
plot(pls.res$TExPosition.Data$lx[,1], pls.cv$cross.validation.res$lx.hat[,1])
pls.cv$cross.validation.res$lxly.cor$cor.lxlxhat
source("C:/Users/juchi/My Tresors/Multivariate_functions/PLSC-related/PLS.kFoldCV.R")
pls.res <- tepPLS(data1,data2, graphs = FALSE)
## Perform 10-fold validation
pls.cv <- PLS.kFoldCV(data1, data2, pls.res, k = 10)
pls.cv$cross.validation.res$lxly.cor$cor.lxlxhat
pls.cv$cross.validation.res$lxly.cor$cor.lylyhat
plot(pls.res$TExPosition.Data$lx[,1], pls.cv$cross.validation.res$lx.hat[,1])
plot(pls.res$TExPosition.Data$ly[,1], pls.cv$cross.validation.res$ly.hat[,1])
save(pls.cv, pls.res, file = "PLS_results_withCV.rda")
